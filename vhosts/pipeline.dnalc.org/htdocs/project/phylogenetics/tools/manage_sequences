<div id="container_rightContentx">
<form method="post">
	<div style="margin-top: 20px;"></div>
	<div style="">
		<input type="checkbox" id="" title="Select all" \
		onclick="var chk=this.checked;$$('#seqs input[type=checkbox]').each(function(el) { el.checked = chk});"/>
	</div>
	<div id="seqs">
% for (@sequences) {
	<div>
		<input type="checkbox" name="seqids" value="<% $_->{id} %>" id="seq<% $_->{s} %>" \
		<% $selected_sequences{$_->{id}} ? "checked=\"checked\"" : "" %> />
		<span id="seq<% $_->{id} |html %>"><% $_->{name} |html%></span>
	</div>
% }
	</div>
	<input type="submit" id="save_selection" value="Save selection" />
	<input type="button" id="close" value="Close" onclick="top.phy.close_window('manage_sequences');"/>
	<input type="hidden" id="pid" value="<% $proj->id %>" />
</form>
% if ($ok == 1) {
<script type="text/javascript">
	top.phy.set_status("phy_alignment", "not-processed");
	top.phy.close_window("manage_sequences");
</script>
% }
</div>
<%args>
	$pid => 0
	@seqids => ()
</%args>
<%once>
	#use File::Slurp qw/read_file/;
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	#use DNALC::Pipeline::Phylogenetics::DataSequence ();
	use DNALC::Pipeline::CacheMemcached ();
	#use DNALC::Pipeline::Config ();
	use Data::Dumper;
</%once>
<%init>
	$r->content_type("text/html");
	
	my $ok;
	my @sequences = ();
	my %selected_sequences = ();
	my %available_sequences = ();

	my $memcached = DNALC::Pipeline::CacheMemcached->new;
	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $proj = $pm->project;
	unless ($proj) {
		print "Project not found!";
		return;
	}

	for my $pair ($pm->pairs) {
		next unless $pair->consensus;
		my @pair_sequences = $pair->paired_sequences;
		my $name = join "_", map {$_->seq->display_id} @pair_sequences;
		push @sequences,  { name => "pair_$name", id => "p$pair"};
	}
	for my $s ($pm->non_paired_sequences) {
		push @sequences, {name => $s->display_id, id => $s->id };
	}
	
	%available_sequences = map {$_->{id} => 1} @sequences;

	my $mc_key = "selected-seq-$pid";
	
	if ($r->method eq "POST") {
		#print STDERR "seqids: ", Dumper(\@seqids);
		for my $seq_id (@seqids) {
			$selected_sequences{$seq_id} = 1 
				if (exists $available_sequences{$seq_id});
		}
		#print STDERR "selected: ", Dumper(\%selected_sequences);
		$memcached->set($mc_key, [ keys %selected_sequences ]);
		if (keys %selected_sequences) {
			$pm->set_task_status("phy_alignment", "not-processed");
			$ok = 1;
		}
	}
	else {
		# get request
		if ($memcached) {
			my $sel = $memcached->get($mc_key);
			if ($sel && @$sel) {
				%selected_sequences = map {$_ => 1} @$sel;
			}
		}
	}
</%init>
<%attr>
	js => ['prototype-1.6.1.js', 'phylogenetics.js']
</%attr>