<div class="container_data3">
<div id="container_data_line">&nbsp;</div>
<form method="post">
%#	<input type="hidden" id="selection_changed" value="" />
	<div class="con_BL_subTitle">
		<input type="checkbox" id="" title="Select all" \
		onclick="$('selection_changed').show();var chk=this.checked;$$('#seqs input[type=checkbox]').each(function(el) { el.checked = el.disabled ? false : chk});"/> Select all
	</div>
	<div id="seqs" class="seqs">
%# show "init" sources at the top
% for my $source (("init", keys %sequence_groups)) {
%	next unless($sequence_groups{$source});
%	my $source_id = $source;
%	$source_id =~ s/\W+/_/g;
	<fieldset id="f<% $source_id %>" style="width:500px;float:left;">
		<legend>
			<input type="checkbox" id="s<%$source_id%>"
			onclick="$('selection_changed').show();var val=this.checked;$$('#f<% $source_id %> input').each(function(i){i.checked = i.disabled ? false: val;});" />
			<& _buildSourceName, $source &>
		</legend>
%	for (@{$sequence_groups{$source}}) {
	<div style="padding-left: 20px;">
		<input type="checkbox" name="seqids" value="<% $_->{id} %>" id="seq<% $_->{s} %>" <% $_->{length} ? "" : q{disabled="disabled"}%>\
		<% $selected_sequences{$_->{id}} ? "checked=\"checked\"" : "" %> onclick="$('selection_changed').show();"/>
		<span id="seq<% $_->{id} |html %>"><% $_->{name} |html%> <% $_->{length} ? "" : "<em><small> - missing seq data</small></em>" %></span>
	</div>
%	}
		</fieldset>
%	delete $sequence_groups{ $source } if $source eq "init";
% }
	<div id="selection_changed" style="display:none;width:200px;margin-left:550px;position:fixed;top:85px;">
		<div style="border:1px solid #C2DBF3;background: #F8FAFC;">
			<div style="background: #C2DBF3; margin:0; padding:2px 0 2px 5px;color: #333">
				<img src="/images/info.png" style="vertical-align: middle;padding-right:7px;" /><strong>Save Your Changes</strong>
			</div>
			<div style="padding:5px;color:#333;">
				Once you have selected the sequences you wish to align, you must click save below.<br />
				<input type="submit" id="save_selection" value="Save Selection" class="bluebtn"/>
			</div>
		</div>
		<div style="border:1px solid #C2DBF3;background: #F8FAFC;margin-top:5px;">
			<div style="background: #C2DBF3; margin:0; padding:2px 2px 2px 5px;color: #333;">
				<img src="/images/info.png" style="vertical-align: middle;padding-right:7px;" /><strong>Download sequences</strong>
			</div>
			<div style="padding:5px;color:#333">
				Click below to download selected sequences in FASTA format.<br />
				<input type="submit" name="download_selection" id="download_selection" value="Download" class="bluebtn"/>
			</div>
		</div>
	</div>
	</div>    
	<div class="list_refdata">
		<input type="hidden" id="pid" value="<% $proj->id %>" />
	</div>
</form>
% if ($ok == 1) {
<script type="text/javascript">
	top.phy.set_status("phy_alignment", "not-processed");
	top.phy.close_window("manage_sequences");
</script>
% }

<div style="clear: both;">&nbsp;</div>
     <div id="container_data_lineBottom">&nbsp;</div>
</div>
</div>
<%args>
	$pid => 0
	@seqids => ()
	$download_selection => ''
</%args>
<%once>
	#use File::Slurp qw/read_file/;
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use DNALC::Pipeline::Phylogenetics::DataSequence ();
	use DNALC::Pipeline::Phylogenetics::Blast ();
	use DNALC::Pipeline::CacheMemcached ();
	use DNALC::Pipeline::Utils qw/lcs_name/;
	use Data::Dumper;
</%once>
<%init>
	$r->content_type("text/html");
	
	my $ok;
	my @sequences = ();
	my %sequence_groups = ();
	my %selected_sequences = ();
	my %available_sequences = ();
	
	my $s = $m->session->{pipeline};

	my $memcached = DNALC::Pipeline::CacheMemcached->new;
	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $proj = $pm->project;
	unless ($proj && $proj->user_id == $s->{user_id}) {
		print "Project not found!";
		return;
	}

	for my $pair ($pm->pairs) {
		next unless $pair->consensus;
		my @pair_sequences = $pair->paired_sequences;
		#my $name = lcs_name( map {$_->seq->display_id} @pair_sequences);
		my $name = $pair->name;
		$name =~ s/[-_\s]+$//;
		push @{$sequence_groups{init}}, { name => "Pair $name", id => "p$pair", "length" => length $pair->consensus};
		$available_sequences{ "p$pair" } = 1;
	}
	# TODO DataSequence->search_non_paired_sequences_with_sources($self->project);
	for my $seq (sort { $a->source_name cmp $b->source_name } $pm->non_paired_sequences) {
		#push @sequences, {name => $seq->display_id, id => $seq->id, source => $seq->source_name};
		push @{$sequence_groups{ $seq->source_name} }, {name => $seq->display_id, id => $seq->id, "length" => length $seq->seq };

		$available_sequences{ $seq->{id} } = 1;
	}
	
	#%available_sequences = map {$_->{id} => 1} @sequences;

	my $mc_key = "selected-seq-$pid";
	
	if ($r->method eq "POST") {
		#print STDERR "seqids: ", Dumper(\@seqids);
		for my $seq_id (@seqids) {
			$selected_sequences{$seq_id} = 1 
				if (exists $available_sequences{$seq_id});
		}

		$memcached->set($mc_key, [ keys %selected_sequences ]);

		if ($download_selection) {
		
			$m->redirect("./download_sequences?pid=" . $proj->id);
			return;
		}

		if (keys %selected_sequences) {
			$pm->set_task_status("phy_alignment", "not-processed");
			$ok = 1;
		}
	}
	else {
		# get request
		if ($memcached) {
			my $sel = $memcached->get($mc_key);
			if ($sel && @$sel) {
				%selected_sequences = map {$_ => 1} @$sel;
			}
		}
	}
</%init>
<%def _buildSourceName>
<% $source %>
<%init>
	my $source = $_[0];
	if ($source eq "init") {
		$source = "User data";
	} elsif ($source =~ /^blast:(\d+)$/) {
		$source = "Blast hits";
		#my $blast = DNALC::Pipeline::Phylogenetics::Blast->retrieve($1);
		#if ($blast && $blast->sequence_id) {
		#	my $seq = DNALC::Pipeline::Phylogenetics::DataSequence->retrieve($blast->sequence_id);
		#	$source .= " " . $seq->display_id if $seq;
		#}
	} elsif ($source =~ /^ref:(.+)$/) {
		$source = "Reference data set <strong>$1</strong>";
	}
</%init>
</%def>

<%attr>
	js => ['prototype-1.6.1.js', 'phylogenetics.js']
</%attr>
