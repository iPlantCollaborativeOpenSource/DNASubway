{"status":"<% $status %>", "message":"<% $message %>"}
<%args> 
	$pid => 0;
	$accession => 0
</%args>
<%once>
	use DNALC::Pipeline::Utils qw(random_string);
	use DNALC::Pipeline::Phylogenetics::DataSequence ();
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use Data::Dumper;
	#use common::sense;
	use HTTP::Tiny ();
	#use LWP::Simple;
	use XML::Simple;
	use URI::Escape;
</%once>
<%init>
	my $status = "error";
	my $message = "";
	my $utils = "http://www.ncbi.nlm.nih.gov/entrez/eutils";
	my $s = $m->session->{pipeline};
	my $cf = DNALC::Pipeline::Config->new;
	my $pcf = $cf->cf('PIPELINE');
	my @err;
	my $seq;
	
	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $proj = $pm->project;
	
	unless ($proj && $s->{user_id} == $proj->user_id) {
		$message = "Project not found!";
		print "{'status': \"$status\" , 'message': \"$message\"}";
		return;
	}

	my $db = "Nucleotide";
	my $report = "fasta";
	my $query = uri_escape($accession);
	#my $query = '28864546';
	
	my $esearch = "$utils/esearch.fcgi?" . "db=$db&retmax=1&usehistory=y&email=dnalcadmin\@cshl.edu&tool=DNASubway&term=";
	my $ht = HTTP::Tiny->new(timeout => 30);
	my $response = $ht->get($esearch . $query);
	
	if ($response->{success} && length $response->{content}){
		my $esearch_result = $response->{content};
		my $esearch_result_parsed = XMLin($esearch_result);
		#print STDERR Dumper($esearch_result_parsed), $/;
		if ($esearch_result_parsed->{Count} == 0){
			$message = $esearch_result_parsed->{WarningList}->{OutputMessage};
			print "{'status': \"$status\", 'message': \"$message\"}";
			return;
		}
		
		$esearch_result =~
		  m|<Count>(\d+)</Count>.*<QueryKey>(\d+)</QueryKey>.*<WebEnv>(\S+)</WebEnv>|s;

		my $Count    = $1;
		my $QueryKey = $2;
		my $WebEnv   = $3;
		
		my $retstart;
		my $retmax=1;

		for($retstart = 0; $retstart < $Count; $retstart += $retmax) {
			my $efetch = "$utils/efetch.fcgi?" .
				"rettype=$report&retmode=text&retstart=$retstart&retmax=$retmax&" .
				"db=$db&query_key=$QueryKey&WebEnv=$WebEnv&email=dnalcadmin\@cshl.edu&tool=DNASubway";

			my $response2 = $ht->get($efetch);
			if ($response2->{success} && length $response->{content}){	
				my $efetch_result = $response2->{content};
				#my $seq = $efetch_result;
				if (length $efetch_result > 20100) {
					$seq = substr $efetch_result, 0, 20100;
					$message = 'clip';
				}
				else{
					$seq = $efetch_result;
				}
				#print STDERR "seq len = ", length $seq, $/;

				my $file2process = $pcf->{upload_dir} . "/" . random_string(7,7);
				my $out = IO::File->new;
				if ($out->open($file2process, "w")) {
					print $out $seq;
					undef $out;
				}

				# add data to db
				my $st = $pm->add_data({
					source => 'GenBank',
					files => [{path => $file2process, }],
					type => 'fasta',
					existing_project => 1,  # must be set every time we add data to an existing project
				});
				if ($st->{errors} && @{$st->{errors}}){
					push @err, @{$st->{errors}};
					print STDERR "Errors = @err";
					$message = "@err";
					#print "{'status': \"$status\", 'message': \"$message\"}";
				}
				else{
					$status = 'success';
					#print "{'status': \"$status\", 'message': \"$message\"}";
				}
			}
		}
	}
</%init>
<%flags>
	inherit => undef
</%flags>