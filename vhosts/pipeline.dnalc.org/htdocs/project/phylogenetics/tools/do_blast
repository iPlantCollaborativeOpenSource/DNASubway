{'status':'<% $status %>', 'message':'<% $msg |js%>'\
% if ($blast) {
,'bid':'<% $blast->id %>'\
% }
}
<%args>
	$pid => 0
	$sid => 0
</%args>
<%once>
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use DNALC::Pipeline::Phylogenetics::DataSequence ();
	use DNALC::Pipeline::Phylogenetics::Pair ();
	use DNALC::Pipeline::Config ();
	
	use File::Spec ();
	#use JSON::XS ();
	use Data::Dumper;
</%once>
<%init>
	my $s = $m->session->{pipeline};

	my ($status, $msg, $seq, $pair, $type, $blast) = ("error", "");
	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $proj = $pm->project;

	unless ($proj && $proj->user_id == $s->{user_id}) {
		$msg = "Project not found.\n";
	}
	else {
		if ($sid =~ /^s\d+/) {
			$type = 'sequence/' . $proj->type;
			$sid =~ s/^\D+//;
			($seq) = DNALC::Pipeline::Phylogenetics::DataSequence->search(
						project_id => $pid,
						id => $sid,
					);
		}
		elsif ($sid =~ /^p\d+/) {
			$type = 'consensus';
			$sid =~ s/^\D+//;
			($pair) = DNALC::Pipeline::Phylogenetics::Pair->search(
						project_id => $pid,
						pair_id => $sid,
					);
		}
	}
	
	if (!$seq && !$pair) {
		$msg .= "Nothing to blast! Invalid data received: [$sid]/type=$type";
	}
	else {
	
		my $st = eval {$pm->do_blast_sequence(
					type => $type, 
					seq => $seq, 
					pair => $pair);
				};
		if ($@) {
			print STDERR "ERROR blasting: ", $@, $/;
		}

		if ($st && $st->{status} eq "success") {
			$blast = $st->{blast};
			$status = 'success';
		}
		else {
			$msg = $st->{message};
		}
		#print STDERR Dumper($st), $/;
	}
</%init>
<%flags>
	inherit => undef
</%flags>

