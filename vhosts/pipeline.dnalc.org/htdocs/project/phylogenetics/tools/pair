<div id="container_data2" class="container_data2">
<style type="text/css">
input[type="checkbox"] {
	border: none;
	margin: 0;
}
/*
span.bold {
	font-weight: bolder;
}

.paired-light {
	background-color:yellow;
}
.paired-dark {
	background-color:silver;
}*/
</style>
% if ($ok == 1) {
<script type="text/javascript">
	top.phy.set_status("phy_pair", "done");
	top.phy.set_status("phy_consensus", "not-processed")
	top.phy.close_window("pair");
</script>
% }
%#pairs: <% Dumper(\@pairs) %>
	<div id="container_data_line">&nbsp;</div>
	<div id="seqids" class="seqids">
		<pre>
% for (@sequences) {
<span id="x<% $_->{s}->display_id |html %>"><% $_->{s}->display_id |html%></span>
% }
		</pre>
	</div>

	<div id="seqs" class="seqs">
		<pre>
%# my $last_pair_id = @sequences ? $sequences[0]->{pair_id} : "";
% my $class = '';
% for (@sequences) {
<span class="<% $class %>" id="<%$_->{s}%>"><% $_->{s}->seq|html %></span>
% }
		</pre>
	</div>

	<div id="seqops" class="seqops">
% if ($is_owner) {
		<pre>
% for (@sequences) {
%	my $dir = $_->{type} eq "s" ? "F" : $_->{strand};
<a style="text-decoration:none" href="javascript:;" id="rc<% $_->{s}->id %>" onclick="phy.toggle_strand(this);"><% $dir %></a> \
<input type="checkbox" id="op<% $_->{s} %>" <%$_->{type} eq "p" ? "checked=\"checked\"" : ""%>/>
% }
</pre>
% }
	</div>
	<div style="clear: both;">&nbsp;</div>
% if ($is_owner) {
%	if (!@pairs) {
	<div style="text-align: center;">
		<input type="button" id="do_pair" value="Save" onclick="javascript:phy.do_pair();"/>
	</div>
% 	}
	<form method="post" id="forma1">
		<input type="hidden" id="step" value="1" />
%#		<input type="hidden" id="op" name="op" />
		<input type="hidden" id="data" name="data" value='<% $json->encode(\@paired_seqids) %>' />
	</form>
% }

	<div style="clear: both;">&nbsp;</div>
	<div id="container_data_lineBottom">&nbsp;</div>
</div><!-- END of container_data2-->

<%args>
	$op => ''
	$data => ''
	$pid => 0
	$ok => 0
</%args>
<%once>
	#use diagnostics;
	use File::Slurp qw/read_file/;
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use DNALC::Pipeline::Config ();
	use DNALC::Pipeline::User ();
	use JSON::XS ();
	use Data::Dumper;
</%once>
<%init>
	$r->content_type("text/html");
	my $s = $m->session->{pipeline};

	my $json = JSON::XS->new->utf8;
	my $new_pairs = undef;
	my @files = ();

	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $proj = $pm->project;
	unless ($proj) {
		#$m->comp('/_message_add', 'Project not found!', 'error');
		#$m->redirect('/project/');
		print "Project not found!";
		return;
	}

	my $user = DNALC::Pipeline::User->retrieve($proj->user_id);
	my $is_owner = $s->{user_id} == $user->user_id;

	my @sequences = ();
	my @pairs = $pm->pairs;
	my @paired_seqids = map {[ map {$_->seq->id} $_->paired_sequences]} @pairs;
	for my $pair (@pairs) {
		push @sequences, map {
					{s => $_->seq, type => "p", strand => $_->strand, pair_id => $pair}
				} $pair->paired_sequences;
	}
	
	push @sequences, map {
				{s => $_, type => "s"}
			}  sort {$a->display_id cmp $b->display_id} $pm->initial_sequences;
	#$pm->sequences;
	
	if ($data) {
		my $decoded_data = $json->decode($data);
		$new_pairs = ref $decoded_data eq "ARRAY" ? $decoded_data : [];
		my @added_pairs = ();
		for my $p (@$new_pairs) {
			my $pair = $pm->add_pair(
				{seq_id => $p->[0]->[0],
				 strand => $p->[0]->[1] ? "R" : "F",
				},
				{seq_id => $p->[1]->[0],
				 strand => $p->[1]->[1] ? "R" : "F",
				},
			);
			push @added_pairs, $p;
			print "added pair ", $pair, $/;
		}
		$pm->set_task_status("phy_pair", "done")
			if @added_pairs;
		$m->redirect("./pair?pid=" . $pid . ';ok=1');
	}
	
</%init>
<%attr>
	js => ['prototype-1.6.1.js', 'phylogenetics.js']
</%attr>

