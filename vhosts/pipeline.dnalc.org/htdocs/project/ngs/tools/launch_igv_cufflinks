<?xml version="1.0" encoding="utf-8"?>

<jnlp
  spec="6.0+"
  codebase="http://www.broadinstitute.org/igv/projects/current">
  <information>
    <title>IGV 2.1</title>
    <vendor>The Broad Institute</vendor>
    <homepage href="http://www.broadinstitute.org/igv"/>
    <description>IGV Software</description>
    <description kind="short">IGV</description>
    <icon href="IGV_64.png"/>
    <icon kind="splash" href="IGV_64.png"/>
    <offline-allowed/>
	<shortcut/>
  </information>
  <security>
      <all-permissions/>
  </security>
  <update check="always" policy="always"/>
  <resources>
<java version="1.6+" initial-heap-size="256m" max-heap-size="900m"/>    
	<jar href="igv.jar" download="eager" main="true"/>
    <jar href="batik-codec.jar" download="eager"/>
    <jar href="goby-io-igv.jar" download="lazy"/>   
    <property name="apple.laf.useScreenMenuBar" value="true"/>
    <property name="com.apple.mrj.application.growbox.intrudes" value="false"/>
    <property name="com.apple.mrj.application.live-resize" value="true"/>
    <property name="com.apple.macos.smallTabs" value="true"/>
  </resources>
  <application-desc main-class="org.broad.igv.ui.Main">
% if ($d) {
		<argument><% $bam_file %></argument>
% } else {
	<argument>http://pipeline-dev.dnalc.org<& "../../.comp/filepath_to_web", file => $bam_file &>\
% 	for (@igv_files) {
,http://pipeline-dev.dnalc.org<& "../../.comp/filepath_to_web", file => $_->file_path &>\
%	}
</argument>
% }
		<argument>-g</argument>
		<argument><% $genome %></argument>
  </application-desc>
</jnlp>
<!-- d=<% $d %> -->

%#-----------------------------------------------------------------
<%args>
	$pid => 0
	$jid => 0
	$d => 0
</%args>
<%once>
	use Data::Dumper;
	use DNALC::Pipeline::Utils qw(clean_query);
	use DNALC::Pipeline::NGS::JobOutputFile ();
	use DNALC::Pipeline::NGS::DataFile ();

	use DNALC::Pipeline::User ();

</%once>
<%init>

	$r->content_type("application/x-java-jnlp-file");
	$r->headers_out->{'Content-Disposition'} = "attachment;filename=igv.jnlp";

	my $stream;
	my $genome = "tair10";
	#my @cl_in_files = DNALC::Pipeline::NGS::JobInputFile->search(job_id => $jid, project_id => $pid);
	my @cl_out_files = 
			map {$_->file} 
			grep {
				$_->file_id->is_local && $_->file_id->file_path =~ /\.gtf$/
			} DNALC::Pipeline::NGS::JobOutputFile->search(job_id => $jid, project_id => $pid);
	my @files = DNALC::Pipeline::NGS::DataFile->get_local_output_files_of_parent_job($jid, $pid);

	print STDERR Dumper([map {$_->file_name} @files ]), $/;
	print STDERR Dumper([map {$_->file_path} @cl_out_files ]), $/;
	#print STDERR Dumper([ map {$_->file_id->file_path} @cl_in_files]), $/;
	#my ($bam_file) = map {$_->file_id->file_path} @cl_in_files;
	
	
	my @igv_files = ();
	##push @igv_files, grep {$_->file->is_local && $_->file->file_path =~ /\.bam$/} @th_out_files;
	#push @igv_files, grep {$_->file->is_local && $_->file->file_path =~ /\.gtf$/} @cl_out_files;
	my ($bam_file) = map {$_->file_path} grep {$_->file_path =~ /\.bam$/} @files;
	my @bed_files = grep {$_->file_path =~ /\.bed$/} @files;
	push @igv_files, @bed_files;
	push @igv_files, @cl_out_files;
	#---------------------------------------------
	
</%init>
<%flags>
	inherit => undef
</%flags>