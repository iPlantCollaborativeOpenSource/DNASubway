<%args>
	$pid => 0
	$f => undef
</%args>
%#-----------------------------------------------------------------
<%once>
	use Data::Dumper;
	#use DNALC::Pipeline::Utils qw(clean_query);
	use DNALC::Pipeline::App::NGS::ProjectManager ();
	use DNALC::Pipeline::NGS::DataFile ();

	use File::Basename qw(dirname);
	use Apache2::Const qw(HTTP_OK HTTP_NOT_FOUND HTTP_PARTIAL_CONTENT);

</%once>
%#-----------------------------------------------------------------
<%init>

	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};
	
	$m->clear_buffer();
	
	my $ext = '';
	
	#if ($r->path_info =~ m|/stream_data/(\d+)/(\d+)(\.bam)?$|) {
	if ($r->path_info =~ m|/(\d+)/(\d+)(\..*)?$|) {
		$pid = $1;
		$f = $2;
		$ext = $3;
	}

	my $pm = DNALC::Pipeline::App::NGS::ProjectManager->new({project => $pid, debug => 1});
	my $proj = $pm->project;

	unless ($proj) {
		return HTTP_NOT_FOUND;
	}

	# project's owner
	my $is_owner = $s->{user_id} == $proj->user_id if $proj;
	
	my ($file) = DNALC::Pipeline::NGS::DataFile->search(project_id => $proj, id => $f) if $f;
	
	unless ($file) {
		return HTTP_NOT_FOUND;
	}

	
	# if $file, then share this file to dnalcadmin with canRead=true
	# then user dnalcadmin's credentials to stream the data
	
	
	# TODO
	# make sure we have the same file extention

	# FAPI
	my $cfg = $pm->config;
	my $apif = iPlant::FoundationalAPI->new(
		user => $cfg->{admin_user},
		token => $cfg->{admin_pwd},
		debug => 0,
	);

	unless ($apif->auth) {
		print "AUTH failed\n";
		print STDERR "stream_data::FAPI auth failed\n", $/;
		return HTTP_OK;
	}
	$pm->api_instance($apif) if $apif;

	my $ok;
	my $io = $pm->api_instance->io;
	if ($io) {
		$m->clear_buffer();
		#$r->headers_out->{'Accept-Ranges'} = "none";
		
		my $file_details;
		
		
		#print STDERR defined($ext) . " vs " . ($file->file_name !~ /$ext$/) . "\n";

		# check the extension
		if (defined $ext && $file->file_name !~ /$ext$/) {
			#print STDERR "---------------------------\n";
			#print STDERR "$ext vs " , $file->file_path, " ", $pid, " ",  $file->source_id, $/;

			my ($alt_file) = grep {
								$_->{file_path} =~ /$ext$/
							} DNALC::Pipeline::NGS::DataFile->search(project_id => $proj, source_id => $file->source_id);
			#print STDERR "---------------------------\n";
			if ($alt_file) {
				my $alt_file_details = $io->ls($alt_file->file_path);
				#print STDERR 'alt: ', $alt_file->file_path, ' ', Dumper($alt_file), $/;
				$file_details = $alt_file_details if ($alt_file_details && @$alt_file_details);
				$file = $alt_file;
			}
		}
		else {
			$file_details = $io->ls($file->file_path);
		}

		unless ($file_details && @$file_details) {
			return HTTP_NOT_FOUND;
		}

		return HTTP_OK if $r->header_only;

		if ($r->method eq 'GET') {
		
			my $headers_in = $r->headers_in();
			print STDERR 'headers_in: ', Dumper($headers_in), $/;
		
			$r->headers_out->{'Content-Length'} = $file_details->[0]->size;
			#$r->content_type($file_details->[0]->{mimeType} || 'application/octet-stream');
			#$r->content_type('text/plain' || 'application/octet-stream');
			#$r->content_type('application/octet-stream');
			$r->headers_out->{'Content-Disposition'} = "attachment;filename=" . $file_details->[0]->name;
			$r->headers_out->{'Accept-Ranges'} = "bytes";
			
			
			$ok = $io->stream_file($file->file_path, stream_to_stdout => 1);
		}
		
		return HTTP_OK;
	}
</%init>

<%flags>
	inherit => undef
</%flags>