<%args>
	$pid => 0
</%args>
<%once>
	use DNALC::Pipeline::App::ProjectManager ();
	use IO::File ();
</%once>
<%init>
	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};
	$r->content_type('text/plain');

	my $pm = DNALC::Pipeline::App::ProjectManager->new($pid);
	my $proj = $pm->project;
	unless ($proj) {
		$m->comp('/_message_add', 'Project not found!', 'error');
		$m->redirect('/project/');
	}

	my $pcf = $pm->config;

	my $gff3_files = $pm->get_available_gff3_files || [];
	my @params = ();
	for my $gff (@$gff3_files) {
		push @params, ('-g', $gff);
	}

	if ( @params) {

		my $user_annot_file = $pm->work_dir . '/user_data.gff';

		my $trimmed_common_name = $pm->cleaned_common_name;

		my @cmd = ($pcf->{EXE_PATH} . '/dump_user_annotations.pl', 
						'--profile', $pm->chado_user_profile,
						'--seqid', $trimmed_common_name,
						'--file', $user_annot_file
					);
		#print STDERR "@cmd", $/;
		my $rc = system ( @cmd);
		#print STDERR  "RC = ", $rc , $/;

		if ($rc == 0 && -f $user_annot_file) {
			#print STDERR  "User file = ", $user_annot_file, $/;
			push @params, ('-g', $user_annot_file);
		}

		my $gff_merger = $pcf->{EXE_PATH} . '/gff3_merger.pl';
		my $gff_file = $pm->work_dir . '/gff3.gff';
		my @args = ($gff_merger, @params, '-f', $pm->fasta_file, '-o', $gff_file);

		system (@args) && die "Error: $!\n";
		#print $gff_file, $/;
		if (-f $gff_file) {
			#$r->headers_out->add('Content-Disposition' => 'attachment;filename=gff3.gff');
			#my ($sample) = grep {$_->{id} == $proj->sample} @{ $pcf->{samples} };
			my $sample = DNALC::Pipeline::Sample->new($proj->sample);
			my $col1 = $sample->segment . ':' . $sample->start . '..' . $sample->stop;
			print q{[gene:AUGUSTUS]
glyph = gene
sub_part = CDS

[gene:SNAP]
glyph = gene

[gene:FGenesH]
glyph = gene

[gene:user]
glyph = gene

}, "\n";
			print "##gff-version 3\n";

			my $in = IO::File->new;
			if ($in->open($gff_file, 'r')) {
				while ( my $line = <$in> ){
					next if $line =~ /^##gff/;
					$line =~ s/^.*?\t/$col1\t/;
					$line =~ s/^>.*/>$col1/;
					print $line;
				}
			}
			undef $in;

		}
		else {
			print "Error: File not found!";
		}
	}
	else {
		print "Error: No gff3 file was found! Perhaps no routine has been called.";
	}
</%init>

<%flags>
	inherit => undef
</%flags>
