% if ($status) {
{'status':'<%$success%>','running' : <% $status->{running} %>, 'known' : '<% $status->{known} %>', 'output':'<& './.comp/filepath_to_web', file => $output &>'}
% } else {
{'status':'error','message':'???'}
% }
%#-------------------------------------------------
<%args>
	$t => ''
	$h => ''
	$pid => 0
</%args>
%#-------------------------------------------------
<%once>
	use Gearman::Client ();
	use DNALC::Pipeline::Project ();
	use DNALC::Pipeline::App::WorkflowManager ();
	use Data::Dumper;

	my @routines = qw/trna_scan augustus fgenesh repeat_masker/;
</%once>
%#-------------------------------------------------
<%init>
	$r->content_type('text/plain');
	$r->no_cache(1);

	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};
	my $success = 'success';

	unless ($t) {
		print "{'status':'error', 'message': 'Task unknown.'}";
		return;
	}

	unless ($h) {
		print "{'status':'error', 'message': 'Unknown error.'}";
		return;
	}
	my $proj = DNALC::Pipeline::Project->retrieve($pid);
	unless ($proj) {
		print "{'status':'error', 'message':'Project unknown.'}";
		return;
	}

	my ($output, $status) = ('', undef);
	if ($h eq '-1') {
		my $wfm = DNALC::Pipeline::App::WorkflowManager->new( $proj );
		my $task_status = $wfm->get_status($t);
		$status = {
					running => $task_status->name eq 'Processing' ? 1 : 0,
					known => $task_status->name eq 'Processing' ? 1 : 0
				};
		$output = $task_status->name eq 'Done' ? $proj->get_gff3_file($t) : '';
	}
	else {
		my $client = Gearman::Client->new;
		$client->job_servers('127.0.0.1');
		my $jst = $client->get_status($h);

		$status = {
				running => $jst->running,
				known => $jst->known
			};
		if ($jst && !$jst->running && !$jst->known) {

			my $wfm = DNALC::Pipeline::App::WorkflowManager->new( $proj );
			my $task_status = $wfm->get_status($t);
			if ($task_status && $task_status->name eq 'Done' ) {
				$output = $proj->get_gff3_file($t);
			}
			else {
				$success = 'error';
			}
		}
	}
</%init>
%#-------------------------------------------------
<%flags>
	inherit => undef
</%flags>
%# vim: ft=mason
