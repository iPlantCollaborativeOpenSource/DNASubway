<%args>
	$pid => 0
</%args>
<%once>
	use DNALC::Pipeline::Project ();
	use DNALC::Pipeline::Config ();
	use DNALC::Pipeline::Chado::Utils ();
	use Data::Dumper;
	my $pcf = DNALC::Pipeline::Config->new->cf('PIPELINE');
</%once>
<%init>
	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};

	my $proj = DNALC::Pipeline::Project->retrieve($pid);
	unless ($proj) {
		$m->comp('/_message_add', 'Project not found!', 'error');
		$m->redirect('/project/');
	}

	# TODO : check project ownership.. ;)

	#my $config = DNALC::Pipeline::Config->new;
	#my $pcf = $config->cf->('PIPELINE');
	#my $pcf = $cfg->cf->('PIPELINE');

	my $organism = join('_', split /\s+/, $proj->organism). '_' . $proj->common_name;
	my $cutils = DNALC::Pipeline::Chado::Utils->new(
		username => $s->{username},
		organism_string => $organism,
		gbrowse_template => $pcf->{GBROWSE_TEMPLATE},
		gbrowse_confdir  => $pcf->{GBROWSE_CONF_DIR},
	);

	# 1st create GBrowse conf file & DB dir for this project
	$cutils->create_gbrowse_conf($proj->id, $pcf->{GBROWSE_DB_DIR});

	my $gff3_files = $proj->get_available_gff3_files || [];
	my @params = ();
	for my $gff (@$gff3_files) {
		push @params, ('-g', $gff);
	}
	if (@params) {
		my $gff_merger = $pcf->{EXE_PATH} . '/gff3_merger.pl';
		my $gff_file = $proj->work_dir . '/gff3.gff';
		my @args = ($gff_merger, @params, '-f', $proj->fasta_file, '-o', $gff_file);
		print STDERR Dumper( \@args), $/;

		system (@args) && die "Error: $!\n";
		my $slink = $pcf->{GBROWSE_DB_DIR} . '/' . $s->{username} . '/' . $proj->id . '/gff3.gff' ;
		print STDERR  "SYMLINK $gff_file -> ", $slink, $/;
		symlink $gff_file, $slink;
		$m->redirect($pcf->{GBROWSE_URL} . '/' . $s->{username} . '_' . $proj->id);
	}
	else {
		$m->comp('/_message_add', "No gff3 file was found! Perhaps no routine has been called.", 'error');
		$m->redirect('./dashboard.html?pid=' . $proj->id);
	}
</%init>
<pre>
r = <% $r->document_root %>
files:
% for my $f (@$gff3_files) {
	- <% $f %>
% }
</pre>
<%flags>
	inherit => undef
</%flags>
