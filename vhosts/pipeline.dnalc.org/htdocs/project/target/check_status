{'status':'<% $status_str %>', 'message':'<% $message %>'\
% if (%files) {
, 'files' : <% to_json(\%files) %> \
% }
}
%#-------------------------------------------------
<%args>
	$g => []
	$tid => 0
	$h => ''
</%args>
%#-------------------------------------------------
<%once>
	use DNALC::Pipeline::App::ProjectManager ();
	use DNALC::Pipeline::TargetGenome ();
	use DNALC::Pipeline::TargetProject ();
	use Gearman::Client();
	use DNALC::Pipeline::CacheMemcached ();
	use Data::Dumper;
	use JSON;
</%once>
%#-------------------------------------------------
<%init>
	$r->content_type("text/plain");

	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};

	unless ($h) {
		print "{'status':'error', 'message': 'Unknown error.'}";
		return;
	}

	my %files;
	my $status_str = 'error';
	my $message = '';
	
	my $client = Gearman::Client->new;
	my $pm = DNALC::Pipeline::App::ProjectManager->new();
	$client->job_servers(@{$pm->config->{GEARMAN_SERVERS}});
	
	my $jst = $h != -1 ? $client->get_status($h) : undef;
	if ($jst && $jst->known) {
		$status_str = 'processing';
	}
	else {
		my $tp = DNALC::Pipeline::TargetProject->retrieve($tid);

		if ($tp) {
			$status_str = $tp->status;
			if ($status_str eq "done") {
				my $workdir = $tp->work_dir;
				for (<$workdir/*>) {
					my $file = $m->comp('../.comp/filepath_to_web', file => $_, just_return => 1);
					if ($file =~ /\.(\w{2,5})$/) {
						$files{$1} = $file;
					}
				}
			}
			elsif ($status_str eq "done-empty") {
				$message = "We could not compute a tree for the data you submited..";
			}
		}
		else {
			$message = "Project not found..";
		}
	}
</%init>
%#-------------------------------------------------
<%flags>
	inherit => undef
</%flags>
%# vim: ft=mason