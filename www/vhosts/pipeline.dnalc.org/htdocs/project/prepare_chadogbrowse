% if ($warn) {
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<body>
	<div>
	<form id="form2">
		<input type="hidden" name="pid" value="<% $pid %>" />
		<p>In order to identify related sequences click a gene or transposons (up to 
		<% nicebasepairs($tcf->{MAX_SEQ_LEN}) %> - basepairs) in the Local Browser 
		and submit it to TARGeT, a tool to conduct Tree Analysis of Related Genes and Transposons.
		</p>
		<input type="submit" name="continue" value="Continue" /><br/>
		<small><input type="checkbox" name="stopwarning" value="1" />Donâ€™t show me this message again.</small>
	</form>
	</div>
</body>
</html>
% }

<%args>
	$pid => 0
	$warn => 0
	$stopwarning => 0
	$continue => ""
</%args>
<%once>
	use DNALC::Pipeline::App::ProjectManager ();
	use DNALC::Pipeline::Config ();
	use DNALC::Pipeline::Chado::Utils ();
	use DNALC::Pipeline::Utils qw(nicebasepairs);

	my $pcf = DNALC::Pipeline::Config->new->cf('PIPELINE');
	my $tcf = DNALC::Pipeline::Config->new->cf('TARGET');
	use Data::Dumper;
</%once>
<%init>
	$m->session->{pipeline} ||= {};
	my $s = $m->session->{pipeline};

	$r->content_type("text/html");
	if ($warn && $s->{stopwarning}) {
		$warn = 0;
	}
	
	if ($stopwarning) {
		$s->{stopwarning} = 1;
	}

	if (!$warn) {
		my $pm = DNALC::Pipeline::App::ProjectManager->new($pid);
		#my $proj = DNALC::Pipeline::Project->retrieve($pid);
		my $proj = $pm->project;
		unless ($proj) {
			$m->comp('/_message_add', 'Project not found!', 'error');
			$m->redirect('/project/');
		}

		# TODO : check project ownership.. ;)
		my ($chado_gbrowse, $gbrowse_confdir);
		if (defined $pcf->{GBROWSE2_CONF_DIR} && $pcf->{GBROWSE2_CONF_DIR}) {
			$gbrowse_confdir = $pcf->{GBROWSE2_CONF_DIR} . '/user_configs';
			$chado_gbrowse = $pcf->{GBROWSE2_CONF_DIR} . '/gbrowse2_chado.template';
		}
		else {
			$gbrowse_confdir = $pcf->{GBROWSE_CONF_DIR};
			$chado_gbrowse = $pcf->{GBROWSE_CONF_DIR} . '/gbrowse_chado.template';
		}

		#print STDERR  "***", join(' ** ', $gbrowse_confdir, $chado_gbrowse), $/;

		my $organism = join('_', split /\s+/, $proj->organism). '_' . $proj->common_name;
		my $cutils = DNALC::Pipeline::Chado::Utils->new(
			username => $pm->username,
			organism_string => $organism,
			chado_gbrowse => $chado_gbrowse,
			gbrowse_confdir  => $gbrowse_confdir,
			profile => $pm->chado_user_profile,
		);

		# create GBrowse conf file for this project
		if ($pm->username =~ /^guest_/) {
			#$cutils->gbrowse_chado_conf($proj->id, $pm->chado_user_database);
			$cutils->gbrowse_chado_conf($proj->id);
		}
		else {
			$cutils->gbrowse_chado_conf($proj->id);
		}

		$m->redirect((defined $pcf->{GBROWSE2_CONF_DIR} ? $pcf->{GBROWSE2_URL} : $pcf->{GBROWSE_URL}) . '/' . $pm->username . '_db_' . $proj->id . '/');
	}
	
</%init>
<%flags>
	inherit => undef
</%flags>
