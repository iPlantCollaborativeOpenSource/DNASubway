<% $json->encode($data) %>
%#<% Dumper($data) %>
%#<% Dumper(\@all_base_locations) %>
%#<% Dumper($f_dash_count) %>
%#-----------------------------------------------------
<%args>
	$pid => 0
	$pair_id => 0
	$pos => 0
</%args>
<%once>
		use File::Slurp qw/read_file/;
		use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
		use DNALC::Pipeline::Phylogenetics::DataSequence ();
		use DNALC::Pipeline::Phylogenetics::Pair;
		use DNALC::Pipeline::Phylogenetics::DataFile;
		use DNALC::Pipeline::Config ();
		use JSON::XS ();
		use Data::Dumper;
</%once>
<%init>
	$r->content_type("text/plain");
	my $json = JSON::XS->new->ascii;
	my $pair = DNALC::Pipeline::Phylogenetics::Pair->retrieve($pair_id);
	#my @pseq = $pair->paired_sequences;
	my @pseq = sort {$a->seq->display_id cmp $b->seq->display_id } $pair->paired_sequences;
	my $data = [];
	my $original_seq_pos;
	my $seq_substring;
	my $dash_count;
	my $reversed_seq;
	my $temp;
	my $trimmed;
	my $trimmed_end;
	my $trimmed_left;
	my $reverse_flag = 0;
	my $offset = 0;
	my $high;
	my $low;

	
	sub trim {
		my $string = shift;
		$string =~ s/^\s+//;
		$string =~ s/\s+$//;
		return $string;
	}	
	
	# ------------------------------
	# Parse the Alignemnt Data
	# ------------------------------
	my $alignment = $pair->alignment;
	my @aln_lines = sort ((split('\n', $alignment))[0, 1]);
	#my @alignment_line_1 = (split(': ', (split('\n', $alignment))[0]));
	#my @alignment_line_2 = (split(': ', (split('\n', $alignment))[1]));
	#my ($display_name_1, $seq1) = ($alignment_line_1[0], $alignment_line_1[1]);
	#my ($display_name_2, $seq2) = ($alignment_line_2[0], $alignment_line_2[1]);

	
	# Get the left and right trim values which were trimmed from the CONSENSUS! 
	#(in the consensus editor, stored in the phy_pair table)
	my $f_cons_trim_value = $pair->f_trim;
	my $r_cons_trim_value = $pair->r_trim;
	
	for (0, 1) {
		my ($display_name, $seq) = split('\s*:\s*', $aln_lines[$_]);
		my $file = DNALC::Pipeline::Phylogenetics::DataFile->retrieve($pseq[$_]->seq->file_id);
		
		if ($file->file_type ne 'trace') {
			push @$data, 0;
			next;
		}
	
		my @all_base_locations = $file->base_locations;
		my @all_qscores = $file->quality_values;
		my $all_traces = $file->trace;
		my $entire_sequence =  $file->seq;
		
		# ---------------------------
		# Calculate Position In Original Sequence
		# ---------------------------
		$trimmed = 0;
		$trimmed_end= 0;
		$reverse_flag = 0;
		if ($pseq[$_]->seq->display_id eq trim($display_name)){
			$offset = 0;
			if ($pseq[$_]->strand eq "F"){
				$seq_substring = substr $seq, 0, $pos;
				$dash_count = ($seq_substring =~ s/-//g);
				
				if ($temp = DNALC::Pipeline::Phylogenetics::DataSequenceTrim->retrieve($pseq[$_]->seq->id)){
					$trimmed = $temp->start_pos;
					$trimmed_end = $temp->end_pos;
				}
				
				$original_seq_pos = $pos- $dash_count + $trimmed + $f_cons_trim_value;
				($low, $high) = ($original_seq_pos - 3, $original_seq_pos + 3);
				$low = $trimmed if $low < $trimmed;
				
				$high = ($trimmed_end - 1) if $temp && $high > ($trimmed_end - 1);
				$offset = 3 - ($original_seq_pos - $trimmed)  if $original_seq_pos - $trimmed < 3;
			}
			elsif ($pseq[$_]->strand eq "R"){
				$reverse_flag = 1;
				$seq_substring = substr ($seq, 0, $pos);
				$dash_count = ($seq_substring =~ s/-//g);
				
				if ($temp = DNALC::Pipeline::Phylogenetics::DataSequenceTrim->retrieve($pseq[$_]->seq->id)){
					$trimmed = length ($temp->right_trim);
					$trimmed_end = $temp->end_pos;
					$trimmed_left = length($temp->left_trim);
				}
				
				$original_seq_pos = length($entire_sequence) - $pos + $dash_count - 1 - $trimmed - $r_cons_trim_value;
				($low, $high) = ($original_seq_pos - 3, $original_seq_pos + 3);
				$low = $trimmed_left if $low < $trimmed_left;
				#$low = $trimmed if $low < $trimmed;
				$high = ($trimmed_end - 1) if $temp && $high > ($trimmed_end - 1);
				$offset = 3 - ($high - $original_seq_pos) if $high - $original_seq_pos < 3;
			}
		}
		# ---------------------------

		my $qscores = [@all_qscores[$low .. $high]];
		my $sequence = substr $entire_sequence, $low, $high - $low + 1;
		my $five_bases_down_pos = $all_base_locations[$low];
		my $five_bases_up_pos = $all_base_locations[$high];
		my $base_locations = [@all_base_locations[$low .. $high]];
		
		my %trace_values = ();
		foreach (keys %$all_traces){
			$trace_values{$_} = [@{$all_traces->{$_}}[$five_bases_down_pos .. $five_bases_up_pos + 5]];
		}
		
		my $d = {
			#debug => $#all_base_locations . " " . $trimmed_end,
			seq_id => $pseq[$_]->seq->id,
			seq_display_id => $pseq[$_]->seq->display_id,
			sequence => $sequence,
			qscores => $qscores,
			trace_values => \%trace_values,
			base_locations => $base_locations,
			position => $original_seq_pos,
			reverse_flag => $reverse_flag,
			offset => $offset,
			high => $high,
			low => $low,
			#pos => { $pos => $all_base_locations[$pos], down => $five_bases_down_pos, up => $five_bases_up_pos},
		};
		
		push @$data, $d;
	}


</%init>
<%flags>
	inherit => undef
</%flags>