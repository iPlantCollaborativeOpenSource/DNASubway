{'status':'<% $status%>', 'data':<% $json_data %>}
%#----------------------------------------------------------------------------
<%args>
	$q => ''
</%args>
%#----------------------------------------------------------------------------
<%once>
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use DNALC::Pipeline::Miner::EOL ();
	#use DNALC::Pipeline::Utils qw(random_string);
	use JSON::XS ();
	use Data::Dumper;
</%once>
%#------------------------------------------------------------
<%init>
	$r->content_type("text/html");
	my $s = $m->session->{pipeline};
	
	my $status = 'error';
	my $message = '';
	my $eol = DNALC::Pipeline::Miner::EOL->new;
	my $json_data = '';
	my $json = JSON::XS->new->utf8;
	
	# cleanup
	$q =~ s/^\s+//;
	$q =~ s/\s+$//;

	if ($q ne '') {
		
		
		$json_data = $m->cache->get("eol-" . lc $q);
		unless (defined $json_data) {
			if ($eol->ping_ok()) {
				my $s = $eol->search($q);
				if ($s && defined $s->{totalResults} && $s->{totalResults} > 0) {
					my @data = ();
					for (@{$s->{results}}) {
						#push @data, {id => $_->{id}, title => $_->{title}, link => $_->{link}};
						push @data, {title => $_->{title}, link => $_->{link}};
					}

					$json_data = $json->encode(\@data);
					$m->cache->set("eol-" . lc $q, $json_data, '30m'); # set cache for 30 minutes
					#print STDERR "CACHE set for $q\n";
				}
				else {
					$json_data = '[]';
				}
				$status = "success";
			}
			else {
				print STDERR "EOL: $message\n";
				$message = "EOL API not responding."
			}
		}
		else {
			#print STDERR "CACHE retrieved for $q\n";
			$status = "success";
		}
	}
</%init>
%#------------------------------------------------------------
<%flags>
	inherit => undef
</%flags>