{"status":"<% $status %>", "message":"<% $message %>"}
<%args> 
	$pid => 0;
	$accession => 0
</%args>
<%once>
	use DNALC::Pipeline::Config ();
	use DNALC::Pipeline::Utils qw(random_string clean_query);
	use DNALC::Pipeline::Phylogenetics::DataSequence ();
	use DNALC::Pipeline::Phylogenetics::DataSource ();
	use DNALC::Pipeline::Phylogenetics::DataFile ();
	use DNALC::Pipeline::App::Phylogenetics::ProjectManager ();
	use DNALC::Pipeline::Miner::Bold ();
	use Data::Dumper;
	use URI::Escape;  
#	use HTTP::Tiny ();   #
#	use XML::Simple;     #
</%once>
<%init>
	
	my $status = "error";
	my $message = "";
	my @err;
	my $pm = DNALC::Pipeline::App::Phylogenetics::ProjectManager->new($pid);
	my $s = $m->session->{pipeline};
	my $proj = $pm->project;
	my $cf = DNALC::Pipeline::Config->new;
	my $pcf = $cf->cf('PIPELINE');
		
	unless ($proj && $s->{user_id} == $proj->user_id) {
		$message = "Project not found!";
		print "{'status': \"$status\" , 'message': \"$message\"}";
		return;
	}
	
	my $ids = uri_escape(clean_query($accession));   #ex: ids=(WEEMX018-10) - the ids has to be of type id_type 

	my $fasta;
	# search for data_sources based on accession#
	my $ds = DNALC::Pipeline::Phylogenetics::DataSource->search(accession => $ids);
	if ($ds) {
		# get data from ds (look for a file linked to this ds)
		my $data_source = $ds->next;
		my ($data_seq) = DNALC::Pipeline::Phylogenetics::DataSequence->search(source_id => $data_source->id);
		if ($data_seq && $data_seq->seq) {
			#$fasta = $df->file_path;
			$fasta = $pcf->{upload_dir} . "/" . random_string(7,7);
			my $out = IO::File->new;
			if ($out->open($fasta, "w")) {
				print $out ">", $data_seq->display_id, "\n";
				print $out $data_seq->seq;
				undef $out;
			}
			print STDERR "Made file: ", $fasta, " from the database", $/;
		}
	}

	unless ( -f $fasta ) {	
		my $bold = DNALC::Pipeline::Miner::Bold->new(
					work_dir => $pm->work_dir,
					marker => $proj->type,
				);
		$bold->fetch($ids);
		$fasta = $bold->store_sequence;
		print STDERR "Fetched from BOLD and made file: ", $fasta, $/;
	}
	
	#print $query, "\n", $fasta, "\n";
	if ($fasta && -f $fasta){
		# add data to database
		my $st = $pm->add_data({
			source => 'Bold',
			files => [{path => $fasta, }],
			type => 'fasta',
			existing_project => 1, # must be set every time we add data to an existing project
			accession => $ids,
		});
		if ($st->{errors} && @{$st->{errors}}){
			push @err, @{$st->{errors}};
			print STDERR "Errors = @err";
			$message = "@err";			
		}
		else{
			$status = 'success';
		}
	}
	else{
		$message = "No record found for id '$accession'" ;
		print "{'status': \"$status\" , 'message': \"$message\"}";
		return;
	}
		
</%init>
<%flags>
	inherit => undef
</%flags>